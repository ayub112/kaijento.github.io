```bash
$ this-is-a-shell-function () {
>     python - "$@" <<\.
> import sys
>
> print(sys.argv)
> .
> }
$ this-is-a-shell-function omg hello hai
['-', 'omg', 'hello', 'hai']
```

You may have seen `alias` before e.g. `alias ll='ls -l'` which would allow you to run 
`ls -l` by using `ll` instead. Shell functions however are more powerful as they take
positional arguments, they are essentially <em>"inlined"</em> scripts.

* Using `-` as a filename is a naming convention that is <em>"commonly"</em> supported to mean read from stdin
* `$@` is the list of arguments given to the function we just pass them to Python using `"$@"`
* `<<` is a heredoc `<<END` will keep reading lines until `END` is found on a line on its own.

We've used `.` as the end marker here but you will commonly see `EOF` used. If any character in the end marker 
is quoted (as it is here with the backslash) it disables any shell expansions. Without it you would
get behaviour such as:

```bash
$ this-is-a-shell-function () {
>     python - <<.
> print('$SHELL')
> .
> }
$ this-is-a-shell-function
/usr/local/shells/bash
```

This is usually not what you want when <em>"inlining"</em> scripts. One issue with
using a heredoc thought is that we wouldn't be able to read from stdin from within
the code because Python is already reading it. (perhaps some file descriptor magic can fix this?)

So we could strip out that part of the code:

gist () {
    python - "$@" <<\.
import os, requests, sys

url = 'https://api.github.com/gists'
ext = 'txt'

filename = sys.argv[1]
with open(filename) as fh:
    content = fh.read()
    if '.' in filename:
        ext = filename.split('.')[-1]

r = requests.post(url, json={
    'files': {
        'file1.' + ext: {
            'content': content
        }
    }
})

print(r.json()['html_url'])
.
}

Instead of using a heredoc we could use Python's `-c` option to pass the code as a string. In doing
this though we would need to either escape any single quotes in the code or replace them with 
double quotes.

```bash
gist () {

python -c '
import os, requests, sys

url = "https://api.github.com/gists"
ext = "txt"

if os.isatty(0):
    filename = sys.argv[1]
    with open(filename) as fh:
        content = fh.read()
        if "." in filename:
            ext = filename.split(".")[-1]
else:
    content = sys.stdin.read()

r = requests.post(url, json={
    "files": {
        "file1." + ext: {
            "content": content
        }
    }
})

print(r.json()["html_url"])
' "$@"
}
`
